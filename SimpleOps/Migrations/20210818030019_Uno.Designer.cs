// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimpleOps.Datos;

namespace SimpleOps.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20210818030019_Uno")]
    partial class Uno
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8");

            modelBuilder.Entity("SimpleOps.Modelo.Aplicación", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Aplicaciones");
                });

            modelBuilder.Entity("SimpleOps.Modelo.AtributoProducto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<int>("TipoID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("TipoID");

                    b.ToTable("AtributosProductos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Bloqueo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EntidadID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraInicio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NombreEntidad")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Propiedad")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Bloqueos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Campaña", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Campañas");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Categoría", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Categorías");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CampañaID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoCobrosID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoFacturasID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CopiasFacturaPropia")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CupoCrédito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripciónEnBanco")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Dirección")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("DíasCrédito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("FormaEntregaPropia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identificación")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("MunicipioID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MínimoRetencionesExtraPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("MínimoRetenciónFuentePropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("MínimoRetenciónICAPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("MínimoRetenciónIVAPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("MínimoTransporteGratisPropio")
                        .HasColumnType("REAL");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("NombreComercial")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ObservacionesFactura")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<double?>("PorcentajeGananciaPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeIVAPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeRetencionesExtraPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeRetenciónFuentePropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeRetenciónICAPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeRetenciónIVAPropio")
                        .HasColumnType("REAL");

                    b.Property<byte>("PrioridadPropia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenciaEnBanco")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("RepresentanteComercialID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Saldo")
                        .HasColumnType("REAL");

                    b.Property<string>("SubtipoCliente")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Teléfono")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<string>("TeléfonoAlternativo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<byte>("TipoCliente")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoContribuyente")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoEntidad")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CampañaID");

                    b.HasIndex("ContactoCobrosID");

                    b.HasIndex("ContactoFacturasID");

                    b.HasIndex("MunicipioID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("RepresentanteComercialID");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cobro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MáximoDíasVencimiento")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NúmerosFacturas")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(1000);

                    b.Property<string>("Respuesta")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<byte>("Tipo")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.ToTable("Cobros");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Compra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComprobanteEgresoID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PedidoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ComprobanteEgresoID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("Compras");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ComprobanteEgreso", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Abono")
                        .HasColumnType("REAL");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Lugar")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ValorFacturas")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("ComprobantesEgresos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Contacto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("EmailActivo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Teléfono")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ContactoCliente", b =>
                {
                    b.Property<int>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacionesFactura")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<byte>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactoID", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.ToTable("ContactosClientes");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ContactoProveedor", b =>
                {
                    b.Property<int>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactoID", "ProveedorID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("ContactosProveedores");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cotización", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Tipo")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ContactoID");

                    b.ToTable("Cotizaciones");
                });

            modelBuilder.Entity("SimpleOps.Modelo.InformePago", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Banco")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaHoraPago")
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("OtroNúmeroCuenta")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.ToTable("InformesPagos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.InventarioConsignación", b =>
                {
                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("ProductoID", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.ToTable("InventariosConsignación");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaCompra", b =>
                {
                    b.Property<int>("CompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("CompraID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasCompras");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaCotización", b =>
                {
                    b.Property<int>("CotizaciónID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("CotizaciónID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasCotizaciones");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNegocio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("LíneasNegocio");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaCréditoCompra", b =>
                {
                    b.Property<int>("NotaCréditoCompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("NotaCréditoCompraID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasNotasCréditoCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaCréditoVenta", b =>
                {
                    b.Property<int>("NotaCréditoVentaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("NotaCréditoVentaID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasNotasCréditoVenta");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaDébitoCompra", b =>
                {
                    b.Property<int>("NotaDébitoCompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("NotaDébitoCompraID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasNotasDébitoCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaDébitoVenta", b =>
                {
                    b.Property<int>("NotaDébitoVentaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("NotaDébitoVentaID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasNotasDébitoVenta");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaOrdenCompra", b =>
                {
                    b.Property<int>("OrdenCompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadEntregada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCumplimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("OrdenCompraID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasÓrdenesCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaPedido", b =>
                {
                    b.Property<int>("PedidoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadEntregada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCumplimiento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("PedidoID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasPedidos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaRemisión", b =>
                {
                    b.Property<int>("RemisiónID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("RemisiónID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasRemisiones");
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaVenta", b =>
                {
                    b.Property<int>("VentaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<double>("Precio")
                        .HasColumnType("REAL");

                    b.HasKey("VentaID", "ProductoID");

                    b.HasIndex("ProductoID");

                    b.ToTable("LíneasVentas");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Marca", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnDescripción")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<bool>("PriorizarEnBuscador")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Material", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Materiales");
                });

            modelBuilder.Entity("SimpleOps.Modelo.MovimientoBancario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Banco")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComprobanteEgresoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripción")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("OtroNúmeroCuenta")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int?>("PadreID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReciboCajaID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Referencia")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Sucursal")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ComprobanteEgresoID");

                    b.HasIndex("PadreID");

                    b.HasIndex("ReciboCajaID");

                    b.ToTable("MovimientosBancarios");
                });

            modelBuilder.Entity("SimpleOps.Modelo.MovimientoEfectivo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ComprobanteEgresoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<int?>("ReciboCajaID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ComprobanteEgresoID");

                    b.HasIndex("ReciboCajaID");

                    b.ToTable("MovimientosEfectivo");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Municipio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Código")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(60);

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("MensajeríaDisponible")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("NombreOficial")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("OtroPaís")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<double?>("PorcentajeIVAPropio")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasAlternateKey("Nombre", "Departamento");

                    b.ToTable("Municipios");
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaCréditoCompra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Razón")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("CompraID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("NotasCréditoCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaCréditoVenta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("Razón")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.Property<int>("VentaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("VentaID");

                    b.ToTable("NotasCréditoVenta");
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaDébitoCompra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompraID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Razón")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("CompraID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("NotasDébitoCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaDébitoVenta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("Razón")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.Property<int>("VentaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("VentaID");

                    b.ToTable("NotasDébitoVenta");
                });

            modelBuilder.Entity("SimpleOps.Modelo.OrdenCompra", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnviadaProforma")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("InformePagoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Número")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<byte>("Prioridad")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Remisionar")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SedeID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SincronizadaWeb")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasAlternateKey("Número", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ContactoID");

                    b.HasIndex("InformePagoID");

                    b.HasIndex("SedeID");

                    b.ToTable("ÓrdenesCompra");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Pedido", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observaciones")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ContactoID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioCliente", b =>
                {
                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Protegido")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ProductoID", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.ToTable("PreciosClientes");
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioLista", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("MáximoDíasCrédito")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Protegido")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SubtipoCliente")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<bool>("TieneRepresentanteComercial")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoCliente")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ProductoID");

                    b.ToTable("ListasPrecios");
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioProveedor", b =>
                {
                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Protegido")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Valor")
                        .HasColumnType("REAL");

                    b.HasKey("ProductoID", "ProveedorID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("PreciosProveedores");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Producto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AplicaciónEspecíficaID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchivoImagenEspecífica")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ArchivoInformaciónEspecífica")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Atributos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<int?>("BaseID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cantidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadMáxima")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadMínima")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CantidadReservada")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaracterísticasEspecíficas")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<byte>("ConceptoRetenciónPropioEspecífico")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CostoUnitario")
                        .HasColumnType("REAL");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripciónEspecífica")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<bool?>("ExcluídoIVAEspecífico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("FísicoEspecífico")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ImpuestoConsumoUnitarioPropioEspecífico")
                        .HasColumnType("REAL");

                    b.Property<int?>("LíneaNegocioEspecíficaID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MarcaEspecíficaID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaterialEspecíficoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Personalizaciones")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<double?>("PesoUnidadEmpaqueEspecífica")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeAdicionalGananciaPropioEspecífico")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeIVAPropioEspecífico")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeImpuestoConsumoPropioEspecífico")
                        .HasColumnType("REAL");

                    b.Property<byte>("PrioridadWebPropiaEspecífica")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductosAsociados")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<int?>("ProveedorPreferidoEspecíficoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int?>("SubcategoríaEspecíficaID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TieneBase")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoImpuestoConsumoPropioEspecífico")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UbicaciónAlmacén")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int>("UnidadEmpaqueEspecífica")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnidadEspecífica")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AplicaciónEspecíficaID");

                    b.HasIndex("BaseID");

                    b.HasIndex("LíneaNegocioEspecíficaID");

                    b.HasIndex("MarcaEspecíficaID");

                    b.HasIndex("MaterialEspecíficoID");

                    b.HasIndex("ProveedorPreferidoEspecíficoID");

                    b.HasIndex("Referencia")
                        .IsUnique();

                    b.HasIndex("SubcategoríaEspecíficaID");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ProductoBase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AplicaciónID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArchivoImagen")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ArchivoInformación")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Características")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(2000);

                    b.Property<byte>("ConceptoRetenciónPropio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripción")
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<bool>("ExcluídoIVA")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Físico")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ImpuestoConsumoUnitarioPropio")
                        .HasColumnType("REAL");

                    b.Property<int?>("LíneaNegocioID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MarcaID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaterialID")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("PesoUnidadEmpaque")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeAdicionalGananciaPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeIVAPropio")
                        .HasColumnType("REAL");

                    b.Property<double?>("PorcentajeImpuestoConsumoPropio")
                        .HasColumnType("REAL");

                    b.Property<byte>("PrioridadWebPropia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductosBaseAsociados")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<int?>("ProveedorPreferidoID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int?>("SubcategoríaID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoImpuestoConsumoPropio")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unidad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnidadEmpaque")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AplicaciónID");

                    b.HasIndex("LíneaNegocioID");

                    b.HasIndex("MarcaID");

                    b.HasIndex("MaterialID");

                    b.HasIndex("ProveedorPreferidoID");

                    b.HasIndex("Referencia")
                        .IsUnique();

                    b.HasIndex("SubcategoríaID");

                    b.ToTable("ProductosBase");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Proveedor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Banco")
                        .HasColumnType("INTEGER");

                    b.Property<double>("CompraMínima")
                        .HasColumnType("REAL");

                    b.Property<int?>("ContactoInformesPagosID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoPedidosID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CupoCrédito")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescripciónEnBanco")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Dirección")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("DíasCrédito")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DíasEntrega")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Identificación")
                        .HasColumnType("TEXT")
                        .HasMaxLength(20);

                    b.Property<int?>("MunicipioID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("NombreComercial")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("NúmeroCuentaBancaria")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<double?>("PorcentajeCostoTransporte")
                        .HasColumnType("REAL");

                    b.Property<double>("PorcentajeDescuento")
                        .HasColumnType("REAL");

                    b.Property<byte>("PrioridadPropia")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenciaEnBanco")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<double>("Saldo")
                        .HasColumnType("REAL");

                    b.Property<string>("Teléfono")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<string>("TeléfonoAlternativo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<int>("TipoContribuyente")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoCuentaBancaria")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("TipoEntidad")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ContactoInformesPagosID");

                    b.HasIndex("ContactoPedidosID");

                    b.HasIndex("MunicipioID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReciboCaja", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Abono")
                        .HasColumnType("REAL");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Lugar")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ValorFacturas")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("RecibosCaja");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReferenciaCliente", b =>
                {
                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ProductoID", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.ToTable("ReferenciasClientes");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReferenciaProveedor", b =>
                {
                    b.Property<int>("ProductoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProveedorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ProductoID", "ProveedorID");

                    b.HasIndex("ProveedorID");

                    b.ToTable("ReferenciasProveedores");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Remisión", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DetalleEntrega")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrdenCompraID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.Property<int?>("VentaID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("OrdenCompraID");

                    b.HasIndex("VentaID");

                    b.ToTable("Remisiones");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Rol", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Permisos")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(10000);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SimpleOps.Modelo.RolUsuario", b =>
                {
                    b.Property<int>("RolID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RolID", "UsuarioID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("RolesUsuarios");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Sede", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ContactoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dirección")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MunicipioID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("ObservacionesEnvío")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.HasKey("ID");

                    b.HasAlternateKey("Nombre", "ClienteID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("ContactoID");

                    b.HasIndex("MunicipioID");

                    b.ToTable("Sedes");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Subcategoría", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoríaID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("CategoríaID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Subcategorías");
                });

            modelBuilder.Entity("SimpleOps.Modelo.TipoAtributoProducto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposAtributosProductos");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("EsRepresentanteComercial")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraCreación")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Teléfono")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Venta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualizadorID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClienteID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ConsecutivoDianAnual")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreadorID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cude")
                        .HasColumnType("TEXT")
                        .HasMaxLength(96);

                    b.Property<bool>("DeInventarioConsignación")
                        .HasColumnType("INTEGER");

                    b.Property<double>("DescuentoComercial")
                        .HasColumnType("REAL");

                    b.Property<double>("DescuentoCondicionado")
                        .HasColumnType("REAL");

                    b.Property<string>("DetalleEntrega")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<byte>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FechaHora")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FechaHoraActualización")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaPagoComisiónEnPago")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FechaPagoComisiónEnVenta")
                        .HasColumnType("TEXT");

                    b.Property<double>("IVA")
                        .HasColumnType("REAL");

                    b.Property<double>("ImpuestoConsumo")
                        .HasColumnType("REAL");

                    b.Property<int?>("InformePagoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Número")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrdenCompraID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prefijo")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int?>("ReciboCajaID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetencionesExtra")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónFuente")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónICA")
                        .HasColumnType("REAL");

                    b.Property<double>("RetenciónIVA")
                        .HasColumnType("REAL");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("InformePagoID");

                    b.HasIndex("OrdenCompraID");

                    b.HasIndex("ReciboCajaID");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("SimpleOps.Modelo.AtributoProducto", b =>
                {
                    b.HasOne("SimpleOps.Modelo.TipoAtributoProducto", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Bloqueo", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cliente", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Campaña", "Campaña")
                        .WithMany()
                        .HasForeignKey("CampañaID");

                    b.HasOne("SimpleOps.Modelo.Contacto", "ContactoCobros")
                        .WithMany()
                        .HasForeignKey("ContactoCobrosID");

                    b.HasOne("SimpleOps.Modelo.Contacto", "ContactoFacturas")
                        .WithMany()
                        .HasForeignKey("ContactoFacturasID");

                    b.HasOne("SimpleOps.Modelo.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioID");

                    b.HasOne("SimpleOps.Modelo.Usuario", "RepresentanteComercial")
                        .WithMany()
                        .HasForeignKey("RepresentanteComercialID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cobro", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Compra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.ComprobanteEgreso", "ComprobanteEgreso")
                        .WithMany("Compras")
                        .HasForeignKey("ComprobanteEgresoID");

                    b.HasOne("SimpleOps.Modelo.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.ComprobanteEgreso", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ContactoCliente", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany("ContactosClientes")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.ContactoProveedor", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Cotización", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.InformePago", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.InventarioConsignación", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Compra", "Compra")
                        .WithMany("Líneas")
                        .HasForeignKey("CompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaCotización", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cotización", "Cotización")
                        .WithMany("Líneas")
                        .HasForeignKey("CotizaciónID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaCréditoCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.NotaCréditoCompra", "NotaCréditoCompra")
                        .WithMany("Líneas")
                        .HasForeignKey("NotaCréditoCompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaCréditoVenta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.NotaCréditoVenta", "NotaCréditoVenta")
                        .WithMany("Líneas")
                        .HasForeignKey("NotaCréditoVentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaDébitoCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.NotaDébitoCompra", "NotaDébitoCompra")
                        .WithMany("Líneas")
                        .HasForeignKey("NotaDébitoCompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaNotaDébitoVenta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.NotaDébitoVenta", "NotaDébitoVenta")
                        .WithMany("Líneas")
                        .HasForeignKey("NotaDébitoVentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaOrdenCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.OrdenCompra", "OrdenCompra")
                        .WithMany("Líneas")
                        .HasForeignKey("OrdenCompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaPedido", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Pedido", "Pedido")
                        .WithMany("Líneas")
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaRemisión", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Remisión", "Remisión")
                        .WithMany("Líneas")
                        .HasForeignKey("RemisiónID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.LíneaVenta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Venta", "Venta")
                        .WithMany("Líneas")
                        .HasForeignKey("VentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.MovimientoBancario", b =>
                {
                    b.HasOne("SimpleOps.Modelo.ComprobanteEgreso", "ComprobanteEgreso")
                        .WithMany()
                        .HasForeignKey("ComprobanteEgresoID");

                    b.HasOne("SimpleOps.Modelo.MovimientoBancario", "Padre")
                        .WithMany()
                        .HasForeignKey("PadreID");

                    b.HasOne("SimpleOps.Modelo.ReciboCaja", "ReciboCaja")
                        .WithMany()
                        .HasForeignKey("ReciboCajaID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.MovimientoEfectivo", b =>
                {
                    b.HasOne("SimpleOps.Modelo.ComprobanteEgreso", "ComprobanteEgreso")
                        .WithMany()
                        .HasForeignKey("ComprobanteEgresoID");

                    b.HasOne("SimpleOps.Modelo.ReciboCaja", "ReciboCaja")
                        .WithMany()
                        .HasForeignKey("ReciboCajaID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaCréditoCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Compra", "Compra")
                        .WithMany()
                        .HasForeignKey("CompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaCréditoVenta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaDébitoCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Compra", "Compra")
                        .WithMany()
                        .HasForeignKey("CompraID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.NotaDébitoVenta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.OrdenCompra", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID");

                    b.HasOne("SimpleOps.Modelo.InformePago", "InformePago")
                        .WithMany("ÓrdenesCompra")
                        .HasForeignKey("InformePagoID");

                    b.HasOne("SimpleOps.Modelo.Sede", "Sede")
                        .WithMany()
                        .HasForeignKey("SedeID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Pedido", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioCliente", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioLista", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.PrecioProveedor", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Producto", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Aplicación", "AplicaciónEspecífica")
                        .WithMany()
                        .HasForeignKey("AplicaciónEspecíficaID");

                    b.HasOne("SimpleOps.Modelo.ProductoBase", "Base")
                        .WithMany()
                        .HasForeignKey("BaseID");

                    b.HasOne("SimpleOps.Modelo.LíneaNegocio", "LíneaNegocioEspecífica")
                        .WithMany()
                        .HasForeignKey("LíneaNegocioEspecíficaID");

                    b.HasOne("SimpleOps.Modelo.Marca", "MarcaEspecífica")
                        .WithMany()
                        .HasForeignKey("MarcaEspecíficaID");

                    b.HasOne("SimpleOps.Modelo.Material", "MaterialEspecífico")
                        .WithMany()
                        .HasForeignKey("MaterialEspecíficoID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "ProveedorPreferidoEspecífico")
                        .WithMany()
                        .HasForeignKey("ProveedorPreferidoEspecíficoID");

                    b.HasOne("SimpleOps.Modelo.Subcategoría", "SubcategoríaEspecífica")
                        .WithMany()
                        .HasForeignKey("SubcategoríaEspecíficaID");

                    b.OwnsOne("SimpleOps.Modelo.Dimensión", "DimensiónUnidadEmpaqueEspecífica", b1 =>
                        {
                            b1.Property<int>("ProductoID")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Alto")
                                .HasColumnType("REAL");

                            b1.Property<double>("Ancho")
                                .HasColumnType("REAL");

                            b1.Property<double>("Largo")
                                .HasColumnType("REAL");

                            b1.HasKey("ProductoID");

                            b1.ToTable("Productos");

                            b1.WithOwner()
                                .HasForeignKey("ProductoID");
                        });
                });

            modelBuilder.Entity("SimpleOps.Modelo.ProductoBase", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Aplicación", "Aplicación")
                        .WithMany()
                        .HasForeignKey("AplicaciónID");

                    b.HasOne("SimpleOps.Modelo.LíneaNegocio", "LíneaNegocio")
                        .WithMany()
                        .HasForeignKey("LíneaNegocioID");

                    b.HasOne("SimpleOps.Modelo.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaID");

                    b.HasOne("SimpleOps.Modelo.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "ProveedorPreferido")
                        .WithMany()
                        .HasForeignKey("ProveedorPreferidoID");

                    b.HasOne("SimpleOps.Modelo.Subcategoría", "Subcategoría")
                        .WithMany()
                        .HasForeignKey("SubcategoríaID");

                    b.OwnsOne("SimpleOps.Modelo.Dimensión", "DimensiónUnidadEmpaque", b1 =>
                        {
                            b1.Property<int>("ProductoBaseID")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Alto")
                                .HasColumnType("REAL");

                            b1.Property<double>("Ancho")
                                .HasColumnType("REAL");

                            b1.Property<double>("Largo")
                                .HasColumnType("REAL");

                            b1.HasKey("ProductoBaseID");

                            b1.ToTable("ProductosBase");

                            b1.WithOwner()
                                .HasForeignKey("ProductoBaseID");
                        });
                });

            modelBuilder.Entity("SimpleOps.Modelo.Proveedor", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Contacto", "ContactoInformesPagos")
                        .WithMany()
                        .HasForeignKey("ContactoInformesPagosID");

                    b.HasOne("SimpleOps.Modelo.Contacto", "ContactoPedidos")
                        .WithMany()
                        .HasForeignKey("ContactoPedidosID");

                    b.HasOne("SimpleOps.Modelo.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReciboCaja", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID");

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReferenciaCliente", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.ReferenciaProveedor", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("ProductoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Proveedor", "Proveedor")
                        .WithMany()
                        .HasForeignKey("ProveedorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Remisión", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.OrdenCompra", "OrdenCompra")
                        .WithMany()
                        .HasForeignKey("OrdenCompraID");

                    b.HasOne("SimpleOps.Modelo.Venta", "Venta")
                        .WithMany("Remisiones")
                        .HasForeignKey("VentaID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.RolUsuario", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Sede", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany("Sedes")
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoID");

                    b.HasOne("SimpleOps.Modelo.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SimpleOps.Modelo.Subcategoría", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Categoría", "Categoría")
                        .WithMany()
                        .HasForeignKey("CategoríaID");
                });

            modelBuilder.Entity("SimpleOps.Modelo.Venta", b =>
                {
                    b.HasOne("SimpleOps.Modelo.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SimpleOps.Modelo.InformePago", "InformePago")
                        .WithMany("Ventas")
                        .HasForeignKey("InformePagoID");

                    b.HasOne("SimpleOps.Modelo.OrdenCompra", "OrdenCompra")
                        .WithMany()
                        .HasForeignKey("OrdenCompraID");

                    b.HasOne("SimpleOps.Modelo.ReciboCaja", "ReciboCaja")
                        .WithMany("Ventas")
                        .HasForeignKey("ReciboCajaID");
                });
#pragma warning restore 612, 618
        }
    }
}
