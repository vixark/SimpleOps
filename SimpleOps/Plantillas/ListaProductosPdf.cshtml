@* Copyright Notice:

SimpleOps® is a free ERP software for small businesses and independents.
Copyright© 2021 Vixark (vixark@outlook.com).
For more information about SimpleOps®, see https://simpleops.net.

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero
General Public License as published by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not,
see https://www.gnu.org/licenses.

This License does not grant permission to use the trade names, trademarks, service marks, or product names
of the Licensor, except as required for reasonable and customary use in describing the origin of the Work
and reproducing the content of the NOTICE file.

Removing or changing the above text is not allowed. *@


@* Plantilla usada por todos los documentos que incluyen una lista de productos con totales como Venta, Factura Proforma, Pedido, etc. *@


@inherits SimpleOps.DocumentosGráficos.PlantillaBase<SimpleOps.DocumentosGráficos.IConLíneasProductos>
@{ #nullable enable }


@{

    var anchoTotal = Model.Columnas.AnchoTotal;
    var anchoConsumo = Model.Columnas.AnchoConsumo;
    var anchoIVA = Model.Columnas.AnchoIVA;
    var anchoSubtotal = Model.Columnas.AnchoSubtotal;
    var anchoCantidad = Model.Columnas.AnchoCantidad;
    var anchoPrecio = Model.Columnas.AnchoPrecio;
    var anchoUnidad = Model.Columnas.AnchoUnidad;
    var radioFilaNombresColumnas = Model.Columnas.RadioFilaNombresColumnas;
    var anchoNúmeroLínea = Model.Columnas.AnchoNúmeroLínea;
    var anchoReferencia = Model.Columnas.AnchoReferencia;
    var anchoDescripción = Model.Columnas.AnchoDescripción;
    var margenColumnasExtremos = Model.Columnas.MargenColumnasExtremos;
    var margenDerechoReferencia = Model.Columnas.MargenDerechoReferencia;
    var rellenoVerticalLíneas = Model.Columnas.RellenoVerticalLíneas;
    var margenInferiorNombreColumnas = Model.Columnas.MargenInferiorNombres;
    
    static string APuntos(double número) => $"{número.ToString().Replace(",", ".")}px";

    static string InsertarEspacio(string referencia) => referencia.Length > 20 ? referencia.Insert(10, " ").Insert(20, " ") :
               (referencia.Length > 10 ? referencia.Insert(10, " ") : referencia); // Debido a que la regla CSS word-break: break-all; no funciona para iText se debe preparar la referencia con un espacio en el medio si esta es muy larga. Así el iText la separa correctamente en varias líneas.

    var selectorÚltimaColumna = "";
    if (anchoTotal > 0) {
        selectorÚltimaColumna = ".total, .total-tít";
    } else if (anchoConsumo > 0) {
        selectorÚltimaColumna = ".consumo, .consumo-tít";
    } else if (anchoIVA > 0) {
        selectorÚltimaColumna = ".iva, .iva-tít";
    } else if (anchoSubtotal > 0) {
        selectorÚltimaColumna = ".subtotal, .subtotal-tít";
    } else {
        selectorÚltimaColumna = ".precio, .precio-tít";
    }

}


<table class="@(Model.ModoImpresión ? "fgtl" : "fc fc-l230") t16b ncolumnas"> @* Es necesario hacerla como una tabla aparte porque si se hace como una fila dentro de la otra tabla el relleno del color no funciona muy bien. En algunas ocasiones se alcanza a diferenciar una pequeña línea de separación entre las celdas. *@
    <tr>

        @if (anchoNúmeroLínea > 0) { <td class="númlín-tít">#</td> }
        <td class="ref-tít">Referencia</td>
        <td class="desc-tít">Descripción</td>
        @if (anchoCantidad > 0) { <td class="cant-tít">Cantidad</td> }
        @if (anchoUnidad > 0) { <td class="uni-tít">Unidad</td> }
        @if (anchoPrecio > 0) { <td class="precio-tít">Precio</td> }
        @if (anchoSubtotal > 0) { <td class="subtotal-tít">Subtotal</td> }
        @if (anchoIVA > 0) { <td class="iva-tít">IVA</td> }
        @if (anchoConsumo > 0) { <td class="consumo-tít">Consumo</td> }
        @if (anchoTotal > 0) { <td class="total-tít">Total</td> }

    </tr>
</table>


<table class="lista-tb">

    @{ var númeroLínea = 1; }
    @foreach (var línea in Model.Líneas) {

        <tr>

            @if (anchoNúmeroLínea > 0) { <td class="númlín">@númeroLínea</td> }
            <td class="ref">

                @if (Model.Columnas.EnlaceWebADetalleProducto != null) {

                    <a href="@Model.Columnas.EnlaceWebADetalleProducto.Replace("{referencia}", línea.ProductoReferencia)">
                        @(InsertarEspacio(línea.ProductoReferencia))
                    </a>

                } else {
                    @(InsertarEspacio(línea.ProductoReferencia))
                }

            </td>
            <td class="desc">@línea.ProductoDescripción</td>
            @if (anchoCantidad > 0) { <td class="cant">@línea.Cantidad</td> }
            @if (anchoUnidad > 0) { <td class="uni">@línea.ProductoUnidadTexto</td> }
            @if (anchoPrecio > 0) { <td class="precio">@línea.PrecioBaseTexto</td> }
            @if (anchoSubtotal > 0) { <td class="subtotal">@línea.SubtotalBaseTexto</td> }
            @if (anchoIVA > 0) { <td class="iva">@línea.IVATexto</td> }
            @if (anchoConsumo > 0) { <td class="consumo">@línea.ImpuestoConsumoTexto</td> }
            @if (anchoTotal > 0) { <td class="total">@línea.SubtotalBaseConImpuestosTexto</td> }

        </tr>
        númeroLínea++;

    }

</table>


<style>


    @* <Generales *@

    .ncolumnas { border-radius: @APuntos(radioFilaNombresColumnas); width: 100%; margin-bottom: @APuntos(margenInferiorNombreColumnas); }

    .ncolumnas td { padding-top: @APuntos(rellenoVerticalLíneas); padding-bottom: @APuntos(rellenoVerticalLíneas); }

    .lista-tb { width: 100%; }

    .lista-tb td { page-break-inside: avoid; padding-top: @APuntos(rellenoVerticalLíneas); padding-bottom: @APuntos(rellenoVerticalLíneas); } /* page-break-inside es necesario para que no se divida la descripción o referencia de la línea en dos páginas diferentes. */

    /* Generales> */


    @* <Anchos y Márgenes Columnas *@

    .númlín, .númlín-tít { width: @APuntos(anchoNúmeroLínea); }

    .ref, .ref-tít { width: @APuntos(anchoReferencia); padding-left: @APuntos(margenColumnasExtremos); padding-right: @APuntos(margenDerechoReferencia); }

    .desc, .desc-tít { width: @APuntos(anchoDescripción); }

    .cant, .cant-tít { width: @APuntos(anchoCantidad); }

    .uni, .uni-tít { width: @APuntos(anchoUnidad); }

    .precio, .precio-tít { width: @APuntos(anchoPrecio); }

    .subtotal, .subtotal-tít { width: @APuntos(anchoSubtotal); }

    .iva, .iva-tít { width: @APuntos(anchoIVA); }

    .consumo, .consumo-tít { width: @APuntos(anchoConsumo); }

    .total, .total-tít { width: @APuntos(anchoTotal); }

    @selectorÚltimaColumna { padding-right: @APuntos(margenColumnasExtremos); }

    /* Anchos y Márgenes Columnas> */


    @* <Alineaciones Textos *@

    .desc-tít, .cant-tít, .uni-tít, .cant, .uni, .númlín, .númlín-tít { text-align: center; }

    .precio-tít, .subtotal-tít, .iva-tít, .consumo-tít, .total-tít, .precio, .subtotal, .iva, .consumo, .total { text-align: right; }

    /* Alineaciones Textos> */


</style>