@* Copyright Notice:

SimpleOps® is a free ERP software for small businesses and independents.
Copyright© 2021 Vixark (vixark@outlook.com).
For more information about SimpleOps®, see https://simpleops.net.

This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero
General Public License as published by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, without even the
implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
License for more details.

You should have received a copy of the GNU Affero General Public License along with this program. If not,
see https://www.gnu.org/licenses.

This License does not grant permission to use the trade names, trademarks, service marks, or product names
of the Licensor, except as required for reasonable and customary use in describing the origin of the Work
and reproducing the content of the NOTICE file.

Removing or changing the above text is not allowed. *@


@inherits SimpleOps.DocumentosGráficos.PlantillaBase<SimpleOps.DocumentosGráficos.DatosCotización>
@using System.Collections.Generic
@{ #nullable enable }


@functions {


    #region Generales
    // Al modificar algo, copiar y pegar en todas las páginas.


    static string APuntos(double número) 
        => $"{número.ToString().Replace(",", ".")}px";


    string ATexto(decimal? precio) 
        => precio == null ? "?" : ((decimal)precio).ToString("### ### ### ##0") + " $"; // Los espacios son espacios delgados tomados de https://www.compart.com/en/unicode/U+2009.


    void Encabezado(string? título, string? imagenBase64, int espaciadoInferior = 28, bool alinearTextoAIzquierda = true) {

        var alto = 92;
        var usarImagen = !string.IsNullOrEmpty(imagenBase64);
        if (!usarImagen) alto = 57;

        <tr>

            <td height="@(alto)px" class="fc">

                <table width="100%">
                    <tr>

                        <td width="100%">
                            @if (alinearTextoAIzquierda) {
                                <div class="t32n fc-l255" style="white-space: nowrap; margin-left: 45px;">@título</div>
                            } else {
                                @if (usarImagen) {
                                    <img style="height: 61px; margin-left: 23px;" src="@imagenBase64" />
                                }
                            }
                        </td>

                        <td>
                            @if (alinearTextoAIzquierda) {
                                @if (usarImagen) {
                                    <img style="height: 61px; margin-right: 45px;" src="@imagenBase64" />
                                }
                            } else {
                                <div class="t32n fc-l255" style="white-space: nowrap; margin-right: 45px;">@título</div>
                            }
                        </td>

                    </tr>
                </table>

            </td>

        </tr>

        FilaEnBlanco(espaciadoInferior);

    } // Encabezado>


    void LogoMarca(string? imagenBase64, int espaciadoInferior = 10, int ancho = 184) {

        <tr>
            <td>
                <img style="width: @APuntos(ancho); margin-left: 22px;" src="@imagenBase64" />
            </td>
        </tr>

        FilaEnBlanco(espaciadoInferior);

    } // LogoMarca>


    void LogoNorma(string? imagenBase64, int desfaceHorizontal = 0, int desfaceVertical = 0) {

        <div style="position: relative">
            <img style="width: 19px; position: absolute; top: @APuntos(-62 + desfaceVertical); left: @APuntos(191 + desfaceHorizontal);" src="@imagenBase64" />
        </div>

    } // LogoNorma>


    void FilaEnBlanco(int alto) {

        <tr>
            <td height="@(alto)px">
                @if (alto > 100) {
                    <span style="font-size: 1px; color: white;">@Model.TextoPruebaColor</span>
                }
            </td>
        </tr>

    } //FilaEnBlanco>


    void ColumnaEnBlanco(int ancho) {

        <td width="@(ancho)px">
        </td>

    } //FilaEnBlanco>


    void TablaPrecios(Dictionary<string, decimal?> precios, string? claseAdicionalTabla = null, string? claseAdicionalContenedorPrecios = null,
        int? ancho = null, string? textoAdicionalPrecio = null, bool centrar = false) {

        <div class="cnprecios @claseAdicionalContenedorPrecios">
            <table class="tprecios @claseAdicionalTabla" @(ancho != null ? @$"style='width:{ancho}px;{(centrar ? " text-align: center!important;" : "")}'" : "")>
                @foreach (var kv in precios) {

                    var precio = kv.Value;
                    var infoPrecio = kv.Key;
                    <tr class="fprecio">
                        <td class="iprecio" style="display: inline-block">@(infoPrecio + (string.IsNullOrEmpty(infoPrecio) ? "" : ":"))</td>
                        <td class="precio" style="display: inline-block">@(ATexto(precio) + textoAdicionalPrecio)</td>
                    </tr>

                }
            </table>
        </div>

    } // TablaPrecios>


    void BotónVideo(string enlace, string? claseAdicional = null, string texto = "Ver Ensamble", bool centrar = false) {

        <a class="a-bi-blc" href="@enlace"><div class="bi-blc @claseAdicional @(centrar ? "dctr" : "")">▶ @texto</div></a>

    } // BotónVideo>


    void BotónDescargaXlsx(string? enlace, string? claseAdicional = null, string texto = "Abrir en Excel", bool centrar = false) {

        if (string.IsNullOrEmpty(enlace)) {

            <span class="t-alerta">Enlace vacío.</span>

        } else {

            <a class="a-bi-blc" href="@enlace">
                <div class="bi-blc @claseAdicional @(centrar ? "dctr" : "")" style="height: 35px;">
                    <table style="width: 103px; text-align: left;">
                        <tr>

                            <td>
                                <img style="width: 33px; margin-left: 10px; margin-right: 10px; margin-top: -1px;" src="@Model.LogoExcelBase64" />
                            </td>

                            <td>
                                <div style="margin-top: -2px;">@texto</div>
                            </td>

                        </tr>
                    </table>
                </div>
            </a>

        }

    } // BotónDescargaXlsx>


    void ReferenciaYDescripción(string? referencia, string? título, string? descripción, string? claseReferencia = null, bool centrarReferencia = false) {

        if (!string.IsNullOrEmpty(referencia)) {
            <div class="bi-c @claseReferencia @(centrarReferencia ? "dctr" : "")">@referencia</div>
        }
        if (!string.IsNullOrEmpty(título)) {
            <div class="tít tít-bref">@título</div>
        }
        if (!string.IsNullOrEmpty(descripción)) {
            <div class="desc">@descripción</div>
        }

    } // ReferenciaYDescripción>


    void Imagen(string? referencia, string claseImagen, bool agregarContenedor = false, string? claseContenedor = null, int? ancho = null,
        int margenDer = 0, int margenSup = 0, int margenInf = 0) {

        var imagenBase64 = referencia != null && Model.ImágenesProductosBase64.ContainsKey(referencia) ?
        Model.ImágenesProductosBase64[referencia] : "data:null";

        var estilo = ancho != null || margenDer != 0 || margenSup != 0 ?
            @$"style='width:{ancho}px; margin-right:{margenDer}px; margin-top:{margenSup}px; margin-bottom:{margenInf}px'" : "";
        if (agregarContenedor) {
            <div class="@claseContenedor">
                <img class="@claseImagen" @estilo src="@imagenBase64" />
            </div>
        } else {
            <img class="@claseImagen" @estilo src="@imagenBase64" />
        }

    } // Imagen>


    void ProductoGeneral(string? referenciaImagen, string? referenciaTítulo, string? título, string? descripción, Dictionary<string, decimal?> precios,
        double ancho, double alto, double margenIzq, double margenSup, int anchoImagen, int margenDerImagen, int? anchoInfoPrecio = null,
        int margenSupImagen = 0, bool agotado = false, bool ocultarPrecio = false, string? claseAdicionalTablaPrecios = null,
        string? claseReferencia = null, string? textoAdicionalPrecio = null) {

        int? largoInfoYPrecio;
        (largoInfoYPrecio, anchoInfoPrecio) = DimensiónInfoPrecioPrecio(precios, anchoInfoPrecio);

        <div style="width: @APuntos(ancho); height: @APuntos(alto); margin-left: @APuntos(margenIzq); margin-top: @APuntos(margenSup);">
            <table>
                <tr>

                    <td class="vtop">
                        @{ Imagen(referenciaImagen, "", ancho: anchoImagen, margenDer: margenDerImagen, margenSup: margenSupImagen); }
                    </td>

                    <td class="vtop">

                        <div style="position: relative; height: @APuntos(alto); width: @APuntos(ancho - anchoImagen - margenDerImagen);">

                            <div>
                                @{ ReferenciaYDescripción(referenciaTítulo, título, descripción, claseReferencia); }
                                @if (agotado) {
                                    <span class="t-alerta">Agotado</span>
                                }
                            </div>

                            <div style="position: absolute; left: 0px; bottom: 0px;">
                                <div style="float:right">
                                    @if (!ocultarPrecio && !agotado) {
                                        TablaPrecios(precios, ancho: anchoInfoPrecio, claseAdicionalTabla: claseAdicionalTablaPrecios,
                                        textoAdicionalPrecio: textoAdicionalPrecio);
                                    }
                                </div>
                            </div>

                        </div>

                    </td>

                </tr>
            </table>
        </div>

    } // ProductoGeneral>


    (int?, int?) DimensiónInfoPrecioPrecio(Dictionary<string, decimal?> precios, int? anchoInfoPrecio = null) {

        var largoInfoYPrecio = precios.Count == 0 ? 7 : precios.Max(kv => kv.Key.Length + (kv.Value == null ? 0 : (decimal)kv.Value!).ToString().Length + 7);
        if (anchoInfoPrecio == null) anchoInfoPrecio = (int)(6.4286 * largoInfoYPrecio);
        return (largoInfoYPrecio, anchoInfoPrecio);

    } // DimensiónInfoPrecioPrecio>


    void ProductoGeneralVertical(string? referenciaImagen, string? referenciaTítulo, string? título, string? descripción, Dictionary<string, decimal?> precios,
        double ancho, double alto, double margenIzq, double margenSup, int anchoImagen, int margenDerImagen, int? anchoInfoPrecio = null,
        int margenSupImagen = 13, bool agotado = false, bool ocultarPrecio = false, string? claseAdicionalTablaPrecios = null,
        string? claseReferencia = null, string? textoAdicionalPrecio = null, int margenInfImagen = 13) {

        int? largoInfoYPrecio;
        (largoInfoYPrecio, anchoInfoPrecio) = DimensiónInfoPrecioPrecio(precios, anchoInfoPrecio);

        <div style="height: @APuntos(alto); margin-left: @APuntos(margenIzq); margin-top: @APuntos(margenSup);">
            <table style="width: @APuntos(ancho);">

                <tr>
                    <td class="vtop tctr">
                        @{ ReferenciaYDescripción(referenciaTítulo, título, descripción, claseReferencia); }
                        @if (agotado) { <span class="t-alerta">Agotado</span> }
                    </td>
                </tr>

                <tr>
                    <td class="vtop tctr">
                        @{ Imagen(referenciaImagen, "", ancho: anchoImagen, margenDer: margenDerImagen, margenSup: margenSupImagen, margenInf: margenInfImagen); }
                    </td>
                </tr>

                <tr>
                    <td class="vtop tctr">
                        @if (!ocultarPrecio && !agotado) {
                            TablaPrecios(precios, ancho: (int?)ancho, claseAdicionalTabla: claseAdicionalTablaPrecios,
                                textoAdicionalPrecio: textoAdicionalPrecio, centrar: true);
                        }
                    </td>

                </tr>

            </table>
        </div>

    } // ProductoGeneralVertical>


    public string ObtenerTipoCelda(bool primeraFila, bool últimaFila, bool primeraColumna, bool últimaColumna) { // Las celdas tienen este orden: a1-b1-c1/a2-b2-c2/a3-b3-c3. Los bordes de a4-b4-c4 son bordes para cuadriculas de 1 fila x 2 columnas en adelante.

        var filaÚnica = primeraFila && últimaFila;
        var columnaÚnica = primeraColumna && últimaColumna;
        var letra = columnaÚnica ? "d" : (primeraColumna ? "a" : (últimaColumna ? "c" : "b"));
        var número = filaÚnica ? "4" : (primeraFila ? "1" : (últimaFila ? "3" : "2"));
        return letra + número;

    } // ObtenerTipoCelda>


    public int ObtenerFilasCompletas(int totalElementos, int cantidadColumnas)
        => (totalElementos / cantidadColumnas) + (totalElementos % cantidadColumnas == 0 ? 0 : 1);


    #endregion Generales>


}


<table width="100%">

    @{ Encabezado("Introducción", null); }

    @{ FilaEnBlanco(9); }

    <tr>
        <td>
            <table class="celdas">

                <tr>

                    <td class="celda celda-pag2a a4">

                        <h2>¡Nuevo producto!</h2>
                        <table>
                            <tr>

                                <td class="vtop">
                                    @{ Imagen("ZZCM", "foto-pag2a"); }
                                </td>

                                <td class="cn-desc">
                                    @{ ReferenciaYDescripción(null, "Camisetas de Varios Colores", "Muy suaves y frescas.<br/>Colores múltiples.<br/>" +
                                           "Apropiadas para días cálidos."); }
                                </td>

                            </tr>
                        </table>

                        <p>
                            Encuentre todas las opciones y sus precios la próxima página.
                        </p>

                    </td>

                    <td class="celda celda-pag2c c4">
                        <p>
                            Esta página es una muestra de una página personalizada con código CSHTML escrito en CatálogoPdf2.cshtml. Es posible hacer
                            cualquier diseño que se desee para múltiples páginas personalizadas: CatálogoPdf2.cshtml, CatálogoPdf3.cshtml, etc.
                        </p>

                        <p>
                            Las siguientes 2 páginas (no personalizadas) usan la plantilla CatálogoPdfExtra.cshtml y los productos en ReferenciasProductosPáginasExtra.
                        </p>
                    </td>

                </tr>

            </table>
        </td>
    </tr>

    @{ FilaEnBlanco(19); }

    @{ Encabezado("Productos Principales con Diseño Personalizado", null); }

    <tr>
        <td>
            <table class="celdas">

                <tr>

                    <td class="celda d1">
                        @{ ProductoGeneral("ZZTV30EJSO", "ZZTV30EJSO", "Televisor", "Negro.<br/>Nuevo.", new Dictionary<string, decimal?> {
                              { "30 Pulgadas", Model.ObtenerPrecio("ZZTV30EJSO") }, { "14 Pulgadas", Model.ObtenerPrecio("ZZM14CEJSO") } }, ancho: 710, 
                              alto: 194, margenIzq: 30, margenSup: 24, anchoImagen: 133, margenDerImagen: 28, claseReferencia: "bi-c-pag2", 
                              claseAdicionalTablaPrecios: "tprecios-pag2"); }
                    </td>

                </tr>
                <tr>
                    <td class="celda d3">
                        @{ ProductoGeneral("ZZVP50EJSO", "ZZVP50EJSO", "Videoproyector", "Blanco.<br/>Usado 2 años.", new Dictionary<string, decimal?> {
                              { "", Model.ObtenerPrecio("ZZVP50EJSO") } }, ancho: 710, alto: 194, margenIzq: 30, margenSup: 24, anchoImagen: 133, 
                              margenDerImagen: 28, claseReferencia: "bi-c-pag2", claseAdicionalTablaPrecios: "tprecios-pag2"); }
                    </td>
                </tr>

            </table>
        </td>
    </tr>

</table>


<style>

    .celda-pag2c, .celda-pag2a {
        height: 337px;
    }

    .celda-pag2a {
        width: 620px;
    }

    .foto-pag2a {
        margin-top: 10px;
        width: 230px;
        margin-right: 29px;
    }

    .celda-pag2c {
        padding: 20px;
    }

    .bi-c-pag2 {
        width: 120px;
    }

    .tprecios-pag2 {
        margin-bottom: 30px;
    }

</style>