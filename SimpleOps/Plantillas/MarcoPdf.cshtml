@* Copyright Notice:

    SimpleOps® is a free ERP software for small businesses and independents.
    Copyright© 2021 Vixark (vixark@outlook.com).
    For more information about SimpleOps®, see https://simpleops.net.

    This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero
    General Public License as published by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY, without even the
    implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
    License for more details.

    You should have received a copy of the GNU Affero General Public License along with this program. If not,
    see https://www.gnu.org/licenses.

    This License does not grant permission to use the trade names, trademarks, service marks, or product names
    of the Licensor, except as required for reasonable and customary use in describing the origin of the Work
    and reproducing the content of the NOTICE file.

    Removing or changing the above text is not allowed. *@


@* Plantilla usada por todos los documentos, incluye los colores y las clases CSS generales usadas por en las otras plantillas. *@


@inherits SimpleOps.DocumentosGráficos.PlantillaBase<SimpleOps.DocumentosGráficos.DatosDocumento>
@using SimpleOps.DocumentosGráficos
@{ #nullable enable }


@{

    double altoPáginas;
    int totalPáginasConCabezaYPie;
    switch (Model.ModoDocumento) {
        case DatosDocumento.Modo.CuerpoContinuo:

            altoPáginas = Model.TotalPáginas * Model.AltoHoja - Model.AltoPie - Model.AltoCabeza; // El altoPáginas podría causar que se genere una página adicional a las esperadas si existe un quiebre de página que genera un espacio adicional considerablemente grande, por ejemplo, si una descripción es muy larga y esto causa que esta termine en la segunda página se genera un espacio en la primera página que causa que esta fórmula no funcione y genere una página adicional. Esto en términos generales no representa mayor problema.
            totalPáginasConCabezaYPie = 1;
            break;

        case DatosDocumento.Modo.PáginasIndependientes:

            altoPáginas = Model.AltoHoja;
            totalPáginasConCabezaYPie = Model.TotalPáginas;
            break;

        default:

            altoPáginas = Model.AltoHoja; // No se pueden lanzar excepciones porque no está registrado el namespace y no vale la pena hacerlo solo para este caso. Se establecen valores por defecto y se espera que se detecte el error por otros medios.
            totalPáginasConCabezaYPie = 1;
            break;

    }

    var selectorCssPáginas = "";
    var empresa = Model.Empresa ?? new DatosEmpresa();
    var esFacturaONotaCrédito = Model.NombreDocumento == "Factura" || Model.NombreDocumento == "Nota Crédito";

    static string APuntos(double número) => $"{número.ToString().Replace(",", ".")}px";

    void AnuncioAplicación(string claseColorLetra) {

        @* Si deseas, puedes eliminar el siguiente div, pero si disfrutas de SimpleOps y quieres apoyarnos, nos ayudarías mucho a su difusión si no lo eliminaras. Si no te gusta la palabra "gratis", elimínala y deja el resto, así también nos sirve para la difusión de la aplicación. *@
        <div style="font-size: 7px; text-align: right; margin-right: 25px;" class="@claseColorLetra">
            Generado gratis con SimpleOps®, visita <a href="https://simpleops.net" class="@claseColorLetra">SimpleOps.net</a>.
        </div>

    } // AnuncioAplicación>

}


@for (int i = 1; i <= totalPáginasConCabezaYPie; i++) {

    selectorCssPáginas += $".página{i}, ";

    <div class="página@(i)">

        @if (Model.NombreDocumento != "Catálogo") {

            <div class="cabeza fc">

                <table class="tb-cabeza">
                    <tr>

                        <td>
                            <div>
                                <img class="logo" src="@Model.LogoBase64" />
                            </div>
                        </td>

                        <td class="tder">

                            @if (string.IsNullOrEmpty(Model.CódigoDocumento)) {

                                <div>
                                    <span class="t30b fc-l230">@Model.NombreDocumento</span>
                                </div>

                            } else {

                                <div>
                                    @switch (Model.NombreDocumento) {
                                        case "Factura":
                                            <span class="t18b fc-l100">Factura Electrónica de Venta</span>
                                            break;
                                        case "Nota Crédito":
                                            <span class="t18b fc-l100">Nota Crédito Electrónica</span>
                                            break;
                                        default:
                                            <span class="t18b fc-l100">@Model.NombreDocumento</span>
                                            break;
                                    }
                                </div>

                                <div>
                                    <span class="t30b fc-l230">@Model.CódigoDocumento</span>
                                </div>

                            }

                        </td>

                    </tr>
                </table>

            </div>

            @if (Model.LíneaBajoCabeza) { <div class="l-cabeza"></div> }

        }

        <div class="cuerpo">

            @switch (i) {
                case 1:
                    @CrearCuerpo(); // Si está en modo CuerpoContinuo el contenido de este cuerpo puede ocupar varias páginas. Si está en modo PáginasIndependientes este cuerpo (VentaPdf.cshtml, CatálogoPdf.cshtml, etc) solo ocupará la página 1.
                    break;
                default:
                    @Incluir("Página" + i, Model);
                    break;
            }

        </div>


        @if (Model.NombreDocumento != "Catálogo") {

            <div class="pie fc tctr fc-l150 t@(Model.TamañoLetraPie)b">

                @(Model.ModoImpresión ? "<hr />" : "")

                <div>
                    <span>@empresa.RazónSocial&nbsp;&nbsp;</span>
                    <span>@empresa.NitCompleto&nbsp;&nbsp;</span>
                    @if (esFacturaONotaCrédito) { <span>@empresa.TipoContribuyenteTexto</span> }
                </div>

                @if (esFacturaONotaCrédito) {
                    <div>
                        <span>Autorización de Facturación</span>
                        <span>@empresa.NúmeroAutorizaciónFacturación</span>
                        <span>del @empresa.PrimerNúmeroFacturaAutorizada al @empresa.ÚltimoNúmeroFacturaAutorizada</span>
                        <span>hasta @empresa.FinAutorizaciónFacturación?.ToShortDateString()</span>
                    </div>
                }

                <div>
                    <span>@empresa.TeléfonoPrincipal&nbsp;&nbsp;</span>
                    <span>@empresa.DirecciónUbicaciónEfectiva&nbsp;&nbsp;</span>
                    <span><a href="mailto:@(empresa.EmailVentas)" class="fc-l150">@empresa.EmailVentas</a>&nbsp;&nbsp;</span>
                    <span><a href="@("https://" + empresa.SitioWeb)" class="fc-l150">@empresa.SitioWeb</a></span>
                </div>

                <div>
                    <span>@empresa.MunicipioUbicaciónNombre - Colombia</span>
                </div>

                @{ AnuncioAplicación("fc-l150"); } 

            </div>

        } else {

            if (i == 2) { // Para el catálogo solo se agrega el anuncio de la aplicación en la primera página con productos (la segunda después de la portada) para no saturar el diseño del documento en todas las páginas.
                AnuncioAplicación("gris-150");
            }
    
        }

    </div>

}


@{ selectorCssPáginas = selectorCssPáginas.TrimEnd().TrimEnd(','); }


<style>


    /* <General */

    @("@page { margin: 0px; }")

    body { margin: 0px; font-family: @Model.NombreFuente; color: @Model.ColorLetra; font-size: @APuntos(Model.TamañoLetra); }

    @(selectorCssPáginas + " { height: " + APuntos(altoPáginas) + "; }")

    hr { height: @APuntos(Model.GrosorBordes); background-color: @Model.ColorBordes; border: none; }

    table td { padding: 0px; }

    a { @(Model.ModoImpresión ? "text-decoration: none;" : "") }

    /* General> */


    /* <Colores - Este código puede ser copiado y reemplazado por un bloque con los colores personalizados. */

    a { color: @(Model.ModoImpresión ? "#191919" : "#1355A5"); } /* Usualmente es el mismo fc-s50, pero podría ser cambiado por otro si se desea. */

    .fc { background-color: @(Model.ModoImpresión ? "#FFFFFF" : "#186ACE"); } /* fc: Fondo de color. */

    .fgtl { background-color: #9B9B9B; color: #FFFFFF; } /* Un estilo de fondo plano gris y color de letra blanco o casi blanco adecuado para la impresión. Es equivalente al fondo color + alguna clase fc-l###, pero solo debe ser usado en ciertos elementos de poca área como el encabezado de las columnas. Se debe establecer con un condicional en cada elemento cuando sea modo impresión y establecer las clases fc y fc-l### cuando no lo sea. */

    .fc-l255 { color: @(Model.ModoImpresión ? "#000000" : "white"); } /* Color luz sobre el fondo de color usado principalmente para los textos. Usualmente es blanco 255-255-255. */

    .fc-l230 { color: @(Model.ModoImpresión ? "#191919" : "#E8F0FA"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 230. */

    .fc-l200 { color: @(Model.ModoImpresión ? "#373737" : "#CDDEF4"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 200. */

    .fc-l180 { color: @(Model.ModoImpresión ? "#4B4B4B" : "#BBD3F0"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 180. */

    .fc-l150 { color: @(Model.ModoImpresión ? "#696969" : "#9FC1EA"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 150. */

    .fc-l130 { color: @(Model.ModoImpresión ? "#7D7D7D" : "#8DB5E6"); } /* Se obtiene con Paint.Net el fc-l130 sobre el fc con una transparencia de 130. */

    .fc-l110 { color: @(Model.ModoImpresión ? "#919191" : "#7BAAE3"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 110. */

    .fc-l100 { color: @(Model.ModoImpresión ? "#9B9B9B" : "#72A4E1"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 100. */

    .fc-l50 { color: @(Model.ModoImpresión ? "#CDCDCD" : "#4587D7"); } /* Se obtiene con Paint.Net el fc-l255 sobre el fc con una transparencia de 50. */

    .fc-s255 { color: black; } /* Color sombra sobre el fondo de color. Usualmente es negro 0-0-0. */

    .fc-s200 { color: @(Model.ModoImpresión ? "#373737" : "#05162C"); } /* Se obtiene con Paint.Net el fc-s255 sobre el fc con una transparencia de 200. */

    .fc-s150 { color: @(Model.ModoImpresión ? "#696969" : "#092B54"); } /* Se obtiene con Paint.Net el fc-s255 sobre el fc con una transparencia de 150. */

    .fc-s100 { color: @(Model.ModoImpresión ? "#9B9B9B" : "#0E407D"); } /* Se obtiene con Paint.Net el fc-s255 sobre el fc con una transparencia de 100. */

    .fc-s70 { color: @(Model.ModoImpresión ? "#CDCDCD" : "#114C95"); } /* Se obtiene con Paint.Net el fc-s255 sobre el fc con una transparencia de 70. */

    .fc-s50 { color: @(Model.ModoImpresión ? "#CDCDCD" : "#1355A5"); } /* Se obtiene con Paint.Net el fc-s255 sobre el fc con una transparencia de 50. */

    .fc-s0, fc-l0 { color: @(Model.ModoImpresión ? "#FFFFFF" : "#186ACE"); } /* Es el mismo color fc pero para aplicarlo a fuentes. Se sigue la misma convención fc-s# para facilitar su recordación. */

    .fc2 { background-color: @(Model.ModoImpresión ? Model.ColorBordes : "#4C8C06"); } /* Fondo de color secundario. */

    .l-cabeza { border-bottom-color: @(Model.ModoImpresión ? "white" : "white"); }

    .gris-240 { color: #F0F0F0; }

    .gris-230 { color: #E6E6E6; }

    .gris-220 { color: #DCDCDC; }

    .gris-210 { color: #D2D2D2; }

    .gris-200 { color: #C8C8C8; }

    .gris-190 { color: #BEBEBE; }

    .gris-180 { color: #B4B4B4; }

    .gris-170 { color: #AAAAAA; }

    .gris-160 { color: #A0A0A0; }

    .gris-150 { color: #969696; }

    .gris-140 { color: #8C8C8C; }

    .gris-130 { color: #828282; }

    .gris-120 { color: #787878; }

    .gris-110 { color: #6E6E6E; }

    .gris-100 { color: #646464; }

    .gris-90 { color: #5A5A5A; }

    .gris-80 { color: #505050; }

    .gris-70 { color: #464646; }

    .gris-60 { color: #3C3C3C; }

    .gris-50 { color: #323232; }

    .gris-40 { color: #282828; }

    .gris-30 { color: #1E1E1E; }

    .gris-20 { color: #141414; }

    .gris-10 { color: #0A0A0A; }

    /* Colores> */


    /* <Tamaño Fuentes y Negrita */

    .t53n { font-size: 53px; font-weight: normal; }

    .t40n { font-size: 40px; font-weight: normal; }

    .t32n { font-size: 32px; font-weight: normal; }

    .t30b { font-size: 30px; font-weight: bold; }

    .t30n { font-size: 30px; font-weight: normal; }

    .t26b { font-size: 26px; font-weight: bold; }

    .t24b { font-size: 24px; font-weight: bold; }

    .t23b { font-size: 23px; font-weight: bold; }

    .t23n { font-size: 23px; font-weight: normal; }

    .t22b { font-size: 22px; font-weight: bold; }

    .t20b { font-size: 20px; font-weight: bold; }

    .t20n { font-size: 20px; font-weight: normal; }

    .t18b { font-size: 18px; font-weight: bold; }

    .t18n { font-size: 18px; font-weight: normal; }

    .t16b { font-size: 16px; font-weight: bold; }

    .t14b { font-size: 14px; font-weight: bold; }

    .t14n { font-size: 14px; font-weight: normal; }

    .t12b { font-size: 12px; font-weight: bold; }

    .t9-5n { font-size: 9.5px; font-weight: normal; }

    .tn { font-weight: bold; }

    /* Tamaño Fuentes y Negrita> */


    /* <Alineaciones */

    .tder { text-align: right; }

    .tizq { text-align: left; }

    .tctr { text-align: center; }

    .dctr { margin-right: auto; margin-left: auto; }

    .vtop { vertical-align: top; } /* Principalmente para td. */

    /* Alineaciones> */


    /* <Cabeza */

    .tb-cabeza {
        height: @APuntos(Model.AltoCabeza); width: @APuntos(Model.AnchoContenido);
        margin-right: @APuntos(Model.MargenHorizontal); margin-left: @APuntos(Model.MargenHorizontal);
    }

    .logo { height: @APuntos(Model.AltoLogo); }

    .l-cabeza {
        height: @APuntos(Model.SeparaciónLíneaBajoCabeza - (Model.ModoImpresión ? 3 : 0 )); /* Se le restan 3 de los 10 que se agregan al pie para que las medidas sean iguales en ambos modos. */
        border-bottom-style: solid;
        border-bottom-width: @APuntos(Model.AnchoLíneaBajoCabeza - (Model.ModoImpresión ? 7 : 0)); /* Se le restan 7 de los 10 que se agregan al pie para que las medidas sean iguales en ambos modos. */
    }

    /* Cabeza> */


    /* <Cuerpo */

    .cuerpo {
        margin-right: @APuntos(Model.MargenHorizontal); margin-left: @APuntos(Model.MargenHorizontal);
        margin-top: @APuntos(Model.MargenVertical); margin-bottom: @APuntos(Model.MargenVertical);
    }

    /* Cuerpo> */


    /* <Pie */

    .pie {
        position: absolute; bottom: 0px; left: 0px;
        height: @APuntos(Model.AltoPie + (Model.ModoImpresión ? 10 : 0)); width: 100%;
        padding-top: @APuntos(Model.RellenoSuperiorPie);
    }

    /* Pie> */


</style>
